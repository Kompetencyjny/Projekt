#include <opencv2/core.hpp>
#include <opencv2/imgcodecs.hpp>
#include <opencv2/highgui.hpp>
#include <opencv2\opencv.hpp>
#include <iostream>
#include <string>

using namespace cv;
using namespace std;

int main(int argc, char** argv) {
	{

		namedWindow("Control", CV_WINDOW_AUTOSIZE); //create a window called "Control"

		int iLowH = 170;
		int iHighH = 179;

		int iLowS = 150;
		int iHighS = 255;

		int iLowV = 60;
		int iHighV = 255;

		//Create trackbars in "Control" window
		createTrackbar("LowH", "Control", &iLowH, 179); //Hue (0 - 179)
		createTrackbar("HighH", "Control", &iHighH, 179);

		createTrackbar("LowS", "Control", &iLowS, 255); //Saturation (0 - 255)
		createTrackbar("HighS", "Control", &iHighS, 255);

		createTrackbar("LowV", "Control", &iLowV, 255);//Value (0 - 255)
		createTrackbar("HighV", "Control", &iHighV, 255);


		while (true)
		{
			Mat imgOriginal=imread("C:/Users/Janek/Desktop/ImageProcessing/Plakietki/Testowe/WIN_20181114_135708.JPG");;
			Mat imgHSV;

			cvtColor(imgOriginal, imgHSV, COLOR_BGR2HSV); //Convert the captured frame from BGR to HSV

			Mat imgThresholded;
			inRange(imgHSV, Scalar(iLowH, iLowS, iLowV), Scalar(iHighH, iHighS, iHighV), imgThresholded); 																							  //morphological opening (remove small objects from the foreground)
			erode(imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));
			dilate(imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));
			dilate(imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));
			erode(imgThresholded, imgThresholded, getStructuringElement(MORPH_ELLIPSE, Size(5, 5)));

			imshow("Thresholded Image", imgThresholded); //show the thresholded image
			imshow("Original", imgOriginal); //show the original image

			if (waitKey(30) == 27) //wait for 'esc' key press for 30ms. If 'esc' key is pressed, break loop
			{
				cout << "esc key is pressed by user" << endl;
				break;
			}
		}

		return 0;
	}
}